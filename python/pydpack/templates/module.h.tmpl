## Setup Cheetah compiler placeholder delimiter to '@' instead of the default
## '$' to prevent from conflicting with shell syntax.
#compiler-settings
commentStartToken = #@#@
directiveStartToken = %%
cheetahVarStartToken = @
#end compiler-settings
%from pydpack.util import defAlign, functionAlign, findAlign, removeStart
#@#@ Lines up to (and including) this one will get discarded from final output.
#ifndef @(define)
#define @(define)

%for @n in @includes
#include <@n>
%end for

%if len(@defines) > 0
%set @al = findAlign([x for x, y in @defines if len(y) > 0]) + len("#define ")
%for @n, @d in @defines
%set @r = defAlign(@al, @n, @d)
%if len(@r) > 1
%for @x in @r
@x
%end for

%else
@r[0]
%end if
%end for

%end if
%if len(@typedefs) > 0
%set @al  = max([len(x[0]) for x in @typedefs]) + len("typedef ") + 1
%for @t, @n in @typedefs
%set @p = " " * (@al - len("typedef ") - 1 - len(@t))
typedef @t @p@n;
%end for

%end if
%for @n, @c in @structures
struct @n {
%set @al  = findAlign([x[0] for x in @c])
%for @t, @v in @c
%set @t, @c = removeStart(@t)
%set @p = " " * (@al - len(@t) - @c) + "*" * @c
	@t@p@v;
%end for
};

%end for
%if len(@functions) > 0
%for @d, _ in @functions
%set @r = functionAlign(@d, endline = ";")
@d[0]
%for @x in @r
@x
%end for
%end for

%end if
%for @f, @d in @InlineFunctions
%set @r = functionAlign(@f)
static inline @f[0]
%for @x in @r
@x
%end for
{
%for @x in @d
%if len(@x) > 0
	@x
%else
@x
%end if
%end for
}

%end for
#endif /* @(define) */
